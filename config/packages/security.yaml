security:

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_USER: ROLE_USER
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        in_database:
            entity:
                class: App\Entity\User
                property: username
        oauth:
            id: knpu.oauth2.user_provider


    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            lazy: true
            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml


            provider: in_database

            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            custom_authenticator:
                      - App\Security\GoogleAuthenticator
                      - App\Security\FacebookAuthenticator
                      - App\Security\LoginFormAuthenticator

            entry_point: App\Security\LoginFormAuthenticator
            switch_user: true


    access_control:
        # require ROLE_ADMIN for /admin*
            - { path: '^/adminn', roles: ROLE_ADMIN }
            - { path: '^/dashboard', roles: [ROLE_ADMIN,ROLE_USER] }
            - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }


        # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
